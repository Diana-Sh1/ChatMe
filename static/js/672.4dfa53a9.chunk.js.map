{"version":3,"file":"static/js/672.4dfa53a9.chunk.js","mappings":"gKACA,EAA0B,yBAA1B,EAA4D,wBAA5D,EAA8F,yBAA9F,EAA4H,oBAA5H,EAAuL,2BAAvL,EAAyN,sBAAzN,EAAsP,sBAAtP,EAAqR,wBAArR,EAAwT,0BAAxT,EAA8V,2BAA9V,EAAgY,sBAAhY,EAAua,gCAAva,EAAid,yBAAjd,EAAkf,uBAAlf,EAAshB,4BAAthB,EAA6jB,0BAA7jB,EAAqmB,6B,mBCUrmB,EATmB,SAACA,GAChB,OACI,eAAIC,UAAWC,EAAO,UAClB,SAAC,KAAO,CAACC,GAAI,YAAcH,EAAMI,GAAIH,UAAc,SAAAI,GAAO,OAAIA,EAAQC,SAAWJ,EAAWA,CAAM,EAAE,SAAEF,EAAMO,QAGxH,ECcA,EAjBgB,SAACP,GACb,OAEI,iBAAKC,UAAWC,EAAiB,WAC7B,iBAAKD,UAAWC,EAAY,WACxB,gBAAKD,UAAWC,EAAO,UACnB,gBAAKD,UAAWC,EAASM,IAAKR,EAAMQ,IAAKC,IAAI,QAEjD,0BAAOT,EAAMU,aAEjB,gBAAKT,UAAWC,EAAU,SAAEF,EAAMW,YAK9C,E,8BC6BA,EAxCgB,SAACX,GAAW,IAAD,EACnBY,EAAQZ,EAAMa,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAU,CAAYV,KAAMU,EAAEV,KAAMH,GAAIa,EAAEb,IAA1Ba,EAAEb,GAA6B,IACzFc,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAO,CAACC,MAAOrB,EAAMqB,MAAkBV,QAASS,EAAET,QAASD,OAAQU,EAAEV,OAAQF,IAAKY,EAAEZ,KAAnDY,EAAEhB,GAAuD,IAM1I,GAA6DkB,EAAAA,EAAAA,IAAQ,CACjEC,KAAM,aADHC,EAAQ,EAARA,SAAsBC,EAAM,EAAlBC,UAAYD,OAASE,EAAY,EAAZA,aAAcC,EAAK,EAALA,MAGpD,OACI,iBAAK3B,UAAWC,EAAU,WACtB,eAAID,UAAWC,EAAK,SAAC,aACrB,iBAAKD,UAAWC,EAAU,WACtB,eAAID,UAAWC,EAAY,SACtBY,KAEL,gBAAKb,UAAWC,EAAW,SACtBgB,KAGL,kBAAMjB,UAAWC,EAAc2B,SAAUF,GAlBpC,SAACG,GACd9B,EAAM+B,YAAYD,EAAKE,gBACvBJ,GACJ,IAe4E,WAC5D,uCAAcJ,EAAS,iBAAkB,CACrCS,SAAU,iBACVC,UAAW,CACPC,MAAO,IACPxB,QAAS,6BAEf,IAAEV,UAAWC,MACf,2BAAa,OAANuB,QAAM,IAANA,OAAM,EAANA,EAAQO,kBAAkB,eAAG/B,UAAWC,EAAS,UAAuB,QAAvB,EAAEuB,EAAOO,sBAAc,aAArB,EAAuBrB,QAAQ,UACzF,gBAAKV,UAAWC,EAAc,UAAC,SAACkC,EAAA,EAAM,cAM1D,E,8BCnCA,GAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KAPkB,SAAC1B,GACnB,MAAO,CACHC,YAAaD,EAAMC,YAE3B,GAIQ,CAACkB,YAAAA,EAAAA,IACLQ,EAAAA,EAHJ,CAGsBC,E","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Dialogs_content__KGl8d\",\"errors\":\"Dialogs_errors__kg6w2\",\"dialogs\":\"Dialogs_dialogs__oe96H\",\"h2\":\"Dialogs_h2__yMxVx\",\"pic\":\"Dialogs_pic__1xZFS\",\"dialogNav\":\"Dialogs_dialogNav__MGGP3\",\"link\":\"Dialogs_link__LWAut\",\"item\":\"Dialogs_item__q23mU\",\"active\":\"Dialogs_active__t8cjl\",\"messages\":\"Dialogs_messages__Cg2l+\",\"logo_name\":\"Dialogs_logo_name__gz2G+\",\"logo\":\"Dialogs_logo__145c0\",\"person_message\":\"Dialogs_person_message__eugxZ\",\"message\":\"Dialogs_message__ZEWo0\",\"image\":\"Dialogs_image__wl+13\",\"enter_text\":\"Dialogs_enter_text__sQM4T\",\"textarea\":\"Dialogs_textarea__anpMz\",\"btn_wrapper\":\"Dialogs_btn_wrapper__O+-2y\"};","import s from \"./../Dialogs.module.css\"\nimport {NavLink} from \"react-router-dom\";\nconst DialogItem = (props) => {\n    return (\n        <li className={s.link}>\n            <NavLink to={\"/dialogs/\" + props.id} className = { navData => navData.isActive ? s.active : s.item }>{props.name}</NavLink>\n        </li>\n    )\n}\n\n\nexport default DialogItem;","import s from \"./../Dialogs.module.css\"\n\n\n\n\nconst Message = (props) => {\n    return (\n\n        <div className={s.person_message}>\n            <div className={s.logo_name}>\n                <div className={s.logo}>\n                    <img className={s.image} src={props.src} alt=\"\"/>\n                </div>\n                <span>{props.person}</span>\n            </div>\n            <div className={s.message}>{props.message}</div>\n\n        </div>\n\n    )\n}\n\nexport default Message;","import s from \"./Dialogs.module.css\"\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {useForm} from \"react-hook-form\";\nimport React from \"react\";\nimport Button from \"../Button/Button\";\n\n\n\nconst Dialogs = (props) => {\n    let state = props.dialogsPage;\n\n    let DialogsElements = state.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\n    let messagesElements = state.messages.map(m => <Message store={props.store} key={m.id} message={m.message} person={m.person} src={m.src}/>)\n\n    const onSubmit = (data) => {\n        props.sendMessage(data.newMessageBody);\n        reset();\n    }\n    const {register, formState: {errors}, handleSubmit, reset} = useForm({\n        mode: \"onSubmit\"\n    });\n    return (\n        <div className={s.content}>\n            <h2 className={s.h2}>Dialogs</h2>\n            <div className={s.dialogs}>\n                <ul className={s.dialogNav}>\n                    {DialogsElements}\n                </ul>\n                <div className={s.messages}>\n                    {messagesElements}\n\n                </div>\n                <form className={s.enter_text} onSubmit={handleSubmit(onSubmit)}>\n                    <textarea {...register('newMessageBody', {\n                        required: \"Required field\",\n                        maxLength: {\n                            value: 300,\n                            message: \"Max length 300 symbols\"\n                        }\n                    })} className={s.textarea}/>\n                    <span>{errors?.newMessageBody && <p className={s.errors}>{errors.newMessageBody?.message} </p>}</span>\n                    <div className={s.btn_wrapper}><Button/></div>\n                </form>\n            </div>\n\n        </div>\n    )\n}\nexport default Dialogs;","import Dialogs from \"./Dialogs\";\nimport {sendMessage} from \"../../redux/dialogs-reducer\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps,\n        {sendMessage}),\n    withAuthRedirect)(Dialogs)\n"],"names":["props","className","s","to","id","navData","isActive","name","src","alt","person","message","state","dialogsPage","DialogsElements","dialogs","map","d","messagesElements","messages","m","store","useForm","mode","register","errors","formState","handleSubmit","reset","onSubmit","data","sendMessage","newMessageBody","required","maxLength","value","Button","compose","connect","withAuthRedirect","Dialogs"],"sourceRoot":""}