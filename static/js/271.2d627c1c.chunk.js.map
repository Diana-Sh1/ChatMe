{"version":3,"file":"static/js/271.2d627c1c.chunk.js","mappings":"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","sources":["webpack://my-app/./src/pages/Chat/ChatPage.module.css?29d9","pages/Chat/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"pic\":\"ChatPage_pic__5XMob\",\"content\":\"ChatPage_content__O9qV0\",\"wrapper\":\"ChatPage_wrapper__qLTEC\",\"messages\":\"ChatPage_messages__fwl3z\",\"messages_inner\":\"ChatPage_messages_inner__vWIjQ\",\"message_wrapper\":\"ChatPage_message_wrapper__wmN2P\",\"textarea\":\"ChatPage_textarea__Bia0n\",\"btn_wrapper\":\"ChatPage_btn_wrapper__l2btZ\",\"message_item\":\"ChatPage_message_item__SKUsX\",\"person_info\":\"ChatPage_person_info__hDg2i\"};","import {FC, useEffect, useRef, useState} from \"react\";\nimport s from \"./ChatPage.module.css\"\nimport {ChatMessageAPIType} from \"../../api/chat-api\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppDispatch, AppStateType} from \"../../redux/redux-store\";\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../../redux/chat-reduces\";\nimport Button from \"../../components/Button/Button\";\n\n\nconst ChatPage: FC = () => {\n    return <div className={s.content}>\n        <Chat/>\n    </div>\n}\n\nconst Chat: FC = () => {\n    const dispatch: AppDispatch = useDispatch()\n    const status = useSelector((state: AppStateType) => state.chat.status)\n\n    useEffect(() => {\n        dispatch(startMessagesListening())\n        return () => {\n            dispatch(stopMessagesListening())\n        }\n    }, [])\n\n    return <div className={s.wrapper}>\n        {status === 'error' ? <div>Some error occured. Please refresh the page.</div> :\n            <>\n                <Messages/>\n                <AddMessageForm/>\n            </>\n        }\n    </div>\n}\nconst Messages: FC = () => {\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\n\n    useEffect(()=>{\n        if(isAutoScroll) {\n            messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth', block: 'center' })\n        }\n    },[messages])\n    return <div className={s.messages}>\n        {messages.map((m, index) => <Message key={index} message={m}/>)}\n        <div className={s.messages_inner} ref={messagesAnchorRef}></div>\n    </div>\n}\n\nconst Message: FC<{ message: ChatMessageAPIType }> = ({message}) => {\n    return <div className={s.message_item}>\n        <div className={s.person_info}>\n            <img className={s.pic} src={message.photo}/>\n            <b className={s.username}>{message.userName}</b>\n        </div>\n        <div className={s.text}>{message.message}</div>\n\n    </div>\n}\n\n\nconst AddMessageForm: FC = () => {\n    const [message, setMessage] = useState('');\n    // const status = useSelector((state: AppStateType) => state.chat.status)\n\n\n    const dispatch: AppDispatch = useDispatch()\n    const sendMessageHandler = () => {\n        if (!message) {\n            return\n        }\n        dispatch(sendMessage(message))\n        setMessage('')\n    }\n    return <div className={s.messages}>\n        <div className={s.message_wrapper}>\n            <textarea className={s.textarea} onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\n            <div className={s.btn_wrapper}  onClick={sendMessageHandler}><Button/></div>\n        </div>\n    </div>\n}\n\nexport default ChatPage;"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","_jsx","className","s","wrapper","children","_jsxs","_Fragment","Messages","AddMessageForm","messagesAnchorRef","useRef","messages","_useState","useState","_useState2","_slicedToArray","isAutoScroll","_messagesAnchorRef$cu","current","scrollIntoView","behavior","block","map","m","index","Message","message","messages_inner","ref","_ref","message_item","person_info","pic","src","photo","username","userName","text","_useState3","_useState4","setMessage","message_wrapper","textarea","onChange","e","currentTarget","value","btn_wrapper","onClick","sendMessage","Button","content"],"sourceRoot":""}